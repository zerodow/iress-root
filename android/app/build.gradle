project.ext.react = [
        entryFile          : "index.android.js",
        bundleInRelease    : true,
        resourcesDirRelease: "src/release/res"
]
apply plugin: "com.android.application"
apply plugin: "io.fabric"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
import com.android.build.OutputFile

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = true

def getVersionNameTimestamp() {
    return new Date().format('yy.MM.ddHHmm')
}

def getVersionCodeTimestamp() {
    // def date = new Date()
    // def formattedDate = date.format('yyMMddHHmm')
    // def code = formattedDate.toInteger()
    // println sprintf("VersionCode: %d", code)
    return 2008250946
}

android {
    compileSdkVersion 30
    buildToolsVersion '29.0.3'
    dexOptions {
        jumboMode true
    }
    packagingOptions {
       pickFirst '**/libc++_shared.so'
    }
    defaultConfig {
        applicationId "com.quantedge.equixnext"
        minSdkVersion 29
        targetSdkVersion 29
        multiDexEnabled true
        versionCode getVersionCodeTimestamp()
        versionName "${getVersionCodeTimestamp()}"
        ndk {
            abiFilters  'armeabi-v7a','arm64-v8a','x86','x86_64'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    signingConfigs {
        release {
            storeFile file("./../equixNext.jks")
            storePassword "190095"
            keyAlias "equixNext"
            keyPassword "190095"
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include 'armeabi-v7a','arm64-v8a','x86','x86_64'
        }
    }
    buildTypes {
        debug {
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            buildConfigField "String", "CODEPUSH_KEY", '""'
            matchingFallbacks = ['debug']
        }

        releaseStaging {
            buildConfigField "String", "CODEPUSH_KEY", '"##codepushKeyAndroid##"'
            matchingFallbacks = ['debug', 'release']
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", '"##codepushKeyAndroid##"'
            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            matchingFallbacks = ['release']
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a": 1, "x86": 2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-keychain')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-reanimated')
    implementation project(':react-native-svg')
    implementation project(':@react-native-community_async-storage')
    implementation project(':react-native-webview')
    // debugImplementation 'com.facebook.flipper:flipper:0.15.0'
    // debugImplementation 'com.squareup.leakcanary:leakcanary-android:1.6.1'
    // releaseImplementation 'com.squareup.leakcanary:leakcanary-android-no-op:1.6.1'

    implementation project(':rn-fetch-blob')
    implementation project(':react-native-blur')
    implementation project(':react-native-restart')
    implementation project(':react-native-exception-handler')
    implementation project(':react-native-version-check')
    implementation project(':react-native-extra-dimensions-android')
    implementation project(':react-native-eventsource')
    implementation project(':react-native-device-info')
    implementation project(':react-native-sound')
    implementation 'com.android.support:multidex:1.0.0'
    implementation "com.android.volley:volley:1.2.0"
    implementation project(':react-native-share')
    implementation project(':react-native-picker')
    implementation project(':react-native-charts-wrapper')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-material-kit')
    implementation project(':react-native-code-push')
    implementation project(':react-native-i18n')
    implementation project(':react-native-config')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-navigation')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-linear-gradient')
    implementation project(':react-native-config')
    implementation project(':react-native-firebase')
    implementation project(':@react-native-community_datetimepicker')

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:27.1.1"
    implementation("com.facebook.react:react-native:+")  // From node_modules
    implementation project(':@okta_okta-react-native')
    implementation 'com.android.support:multidex:1.0.2'

    // RNFirebase required dependencies
    implementation "com.google.firebase:firebase-core:16.0.9"

    // If you are receiving Google Play API availability issues, add the following dependency
    implementation "com.google.android.gms:play-services-base:16.1.0"
    // RNFirebase optional dependencies
    // implementation "com.google.firebase:firebase-ads:17.2.1"
    // implementation "com.google.firebase:firebase-analytics:15.0.0"
    implementation "com.google.firebase:firebase-auth:17.0.0"
    implementation "com.google.firebase:firebase-config:17.0.0"
    implementation "com.google.firebase:firebase-database:17.0.0"
    implementation "com.google.firebase:firebase-perf:16.2.5"
    implementation "com.google.firebase:firebase-storage:17.0.0"
    implementation 'com.google.firebase:firebase-messaging:18.0.0'
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }
    implementation 'com.android.support:support-v4:27.1.1'
}

// Run this once to be able to run the application with BUCK
// puts all implementation dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

// repositories {
//     mavenCentral()
// }

apply plugin: 'com.google.gms.google-services'
apply plugin: "com.google.firebase.firebase-perf"
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true
