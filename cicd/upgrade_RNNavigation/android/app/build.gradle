project.ext.react = [
    entryFile: "index.js",
    bundleInRelease        : true,
    resourcesDirRelease   : "src/release/res"
]
apply plugin: "com.android.application"
apply plugin: "io.fabric"
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"
import com.android.build.OutputFile

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

def getVersionNameTimestamp() {
    return new Date().format('yy.MM.ddHHmm')
}

def getVersionCodeTimestamp() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHHmm')
    def code = formattedDate.toInteger()
    println sprintf("VersionCode: %d", code)
    return code
}

android {
    compileSdkVersion 30
    buildToolsVersion '28.0.3'
    dexOptions {
        jumboMode true
    }
    defaultConfig {
        applicationId "com.quantedge.equixnext"
        minSdkVersion 23
        targetSdkVersion 30
        missingDimensionStrategy "RNN.reactNativeVersion", "reactNative55"
        multiDexEnabled true
        versionCode getVersionCodeTimestamp()
        versionName "${getVersionCodeTimestamp()}"
        ndk {
            abiFilters "armeabi-v7a", "x86"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    
    signingConfigs {
       release {
          storeFile file("./../equixNext.jks")
          storePassword "190095"
          keyAlias "equixNext"
          keyPassword "190095"
      }
   }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86"
        }
    }
    buildTypes {
        debug {
            // Note: CodePush updates should not be tested in Debug mode as they are overriden by the RN packager. However, because CodePush checks for updates in all modes, we must supply a key.
            buildConfigField "String", "CODEPUSH_KEY", '""'
            matchingFallbacks = ['debug']
        }

        releaseStaging {
            buildConfigField "String", "CODEPUSH_KEY", '"##codepushKeyAndroid##"'
            matchingFallbacks = ['debug', 'release']
        }
        release {
            buildConfigField "String", "CODEPUSH_KEY", '"##codepushKeyAndroid##"'
            minifyEnabled enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
            matchingFallbacks = ['release']
        }
    }
    
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-pdf')
    implementation project(':rn-fetch-blob')
    implementation project(':react-native-blur')
    implementation project(':react-native-restart')
    implementation project(':react-native-exception-handler')
    implementation project(':react-native-version-check')
    implementation project(':react-native-extra-dimensions-android')
    implementation project(':react-native-eventsource')
    implementation project(':react-native-device-info')
    implementation project(':react-native-sound')
    implementation 'com.android.support:multidex:1.0.0'
    implementation "com.android.volley:volley:1.2.0"
    implementation project(':react-native-share')
    implementation project(':react-native-picker')
    implementation project(':react-native-charts-wrapper')
    implementation project(':react-native-splash-screen')
    implementation project(':react-native-material-kit')
    implementation project(':react-native-code-push')
    implementation project(':react-native-i18n')
    implementation project(':react-native-config')
    implementation project(':react-native-vector-icons')
	implementation project(':react-native-navigation')
	implementation project(':react-native-vector-icons')
    implementation project(':react-native-linear-gradient')
	implementation project(':react-native-config')
    implementation project(':react-native-firebase')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:27.1.1"
    implementation ("com.facebook.react:react-native:+")  // From node_modules
    implementation 'com.android.support:multidex:1.0.2'

     // RNFirebase required dependencies
    implementation "com.google.firebase:firebase-core:16.0.9"

    // If you are receiving Google Play API availability issues, add the following dependency
    implementation "com.google.android.gms:play-services-base:16.1.0"
    // RNFirebase optional dependencies
    // implementation "com.google.firebase:firebase-ads:17.2.1"
    // implementation "com.google.firebase:firebase-analytics:15.0.0"
    implementation "com.google.firebase:firebase-auth:17.0.0"
    implementation "com.google.firebase:firebase-config:17.0.0"
    implementation "com.google.firebase:firebase-database:17.0.0"
    implementation "com.google.firebase:firebase-perf:16.2.5"
    implementation "com.google.firebase:firebase-storage:17.0.0"
    implementation 'com.google.firebase:firebase-messaging:18.0.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.9@aar') {
        transitive = true
    }
}

// Run this once to be able to run the application with BUCK
// puts all implementation dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
  from configurations.compile
  into 'libs'
}

apply plugin: 'com.google.gms.google-services'
apply plugin: "com.google.firebase.firebase-perf"
com.google.gms.googleservices.GoogleServicesPlugin.config.disableVersionCheck = true